FeatureScatter(alldata, "percent_ribo", "nFeature_RNA", group.by = "orig.ident")+ ggtitle(""),
FeatureScatter(alldata, "percent_ribo", "percent_mito", group.by = "orig.ident")+ ggtitle("")
,legend = 'bottom')
CombinePlots(
FeatureScatter(alldata, "nCount_RNA"  , "nFeature_RNA", group.by = "orig.ident")+ ggtitle(""),
FeatureScatter(alldata, "percent_mito", "nFeature_RNA", group.by = "orig.ident")+ ggtitle(""),
FeatureScatter(alldata, "percent_ribo", "nFeature_RNA", group.by = "orig.ident")+ ggtitle(""),
FeatureScatter(alldata, "percent_ribo", "percent_mito", group.by = "orig.ident")+ ggtitle(""),
legend = 'bottom')
CombinePlots(
FeatureScatter(alldata, "nCount_RNA"  , "nFeature_RNA", group.by = "orig.ident")+ ggtitle(""),
FeatureScatter(alldata, "percent_mito", "nFeature_RNA", group.by = "orig.ident")+ ggtitle(""),
FeatureScatter(alldata, "percent_ribo", "nFeature_RNA", group.by = "orig.ident")+ ggtitle(""),
FeatureScatter(alldata, "percent_ribo", "percent_mito", group.by = "orig.ident")+ ggtitle(""),legend = NULL)
CombinePlots(ncol = 2,
FeatureScatter(alldata, "nCount_RNA"  , "nFeature_RNA", group.by = "orig.ident")+ ggtitle(""),
FeatureScatter(alldata, "percent_mito", "nFeature_RNA", group.by = "orig.ident")+ ggtitle(""),
FeatureScatter(alldata, "percent_ribo", "nFeature_RNA", group.by = "orig.ident")+ ggtitle(""),
FeatureScatter(alldata, "percent_ribo", "percent_mito", group.by = "orig.ident")+ ggtitle(""),legend = NULL)
CombinePlots(ncol = 2,
FeatureScatter(alldata, "nCount_RNA"  , "nFeature_RNA", group.by = "orig.ident")+ ggtitle(""),
FeatureScatter(alldata, "percent_mito", "nFeature_RNA", group.by = "orig.ident")+ ggtitle(""),
FeatureScatter(alldata, "percent_ribo", "nFeature_RNA", group.by = "orig.ident")+ ggtitle(""),
FeatureScatter(alldata, "percent_ribo", "percent_mito", group.by = "orig.ident")+ ggtitle(""),
legend = NULL)
# Way1: Doing it using Seurat function
alldata <- PercentageFeatureSet(alldata, "^MT-", col.name = "percent_mito")
# Way2: Doing it manually
total_counts_per_cell <- colSums(  alldata@assays$RNA@counts  )
mito_genes <- rownames(alldata)[grep("^MT-",rownames(alldata))]
head(mito_genes,10)
alldata$percent_mito <- colSums(  alldata@assays$RNA@counts[mito_genes,]  ) / total_counts_per_cell
# Way1: Doing it using Seurat function
alldata <- PercentageFeatureSet(alldata, "^RP[SL]", col.name = "percent_ribo")
# Way2: Doing it manually
ribo_genes <- rownames(alldata)[grep("^RP[SL]",rownames(alldata))]
head(ribo_genes,10)
alldata$percent_ribo <- colSums(  alldata@assays$RNA@counts[ribo_genes,]  ) / total_counts_per_cell
feats <- c("nFeature_RNA","nCount_RNA","percent_mito","percent_ribo")
VlnPlot(alldata, group.by= "orig.ident", features = feats, pt.size = 0.1,ncol = 4) + NoLegend()
CombinePlots(ncol = 2,
FeatureScatter(alldata, "nCount_RNA"  , "nFeature_RNA", group.by = "orig.ident")+ ggtitle(""),
FeatureScatter(alldata, "percent_mito", "nFeature_RNA", group.by = "orig.ident")+ ggtitle(""),
FeatureScatter(alldata, "percent_ribo", "nFeature_RNA", group.by = "orig.ident")+ ggtitle(""),
FeatureScatter(alldata, "percent_ribo", "percent_mito", group.by = "orig.ident")+ ggtitle(""),
legend = NULL)
cowplot::plot_grid(
FeatureScatter(alldata, "nCount_RNA"  , "nFeature_RNA", group.by = "orig.ident")+ ggtitle(""),
FeatureScatter(alldata, "percent_mito", "nFeature_RNA", group.by = "orig.ident")+ ggtitle(""),
FeatureScatter(alldata, "percent_ribo", "nFeature_RNA", group.by = "orig.ident")+ ggtitle(""),
FeatureScatter(alldata, "percent_ribo", "percent_mito", group.by = "orig.ident")+ ggtitle("")
)
most_expressed <- sort(Matrix::rowSums(alldata@assays$RNA@counts))
most_expressed
most_expressed <- sort(Matrix::rowSums(alldata@assays$RNA@counts),T)
most_expressed
barplot(most_expressed)
most_expressed <- sort(Matrix::rowSums(alldata@assays$RNA@counts),T)[1:30]
barplot(most_expressed)
barplot(most_expressed,las=2)
ggplot(most_expressed)+ geom_col()
ggplot(fortify(most_expressed)) + geom_col()
ggplot(as.data.frame(most_expressed)) + geom_col()
boxplot( t(alldata@assays$RNA@counts[names(most_expressed)]) )
boxplot( t(alldata@assays$RNA@counts[names(most_expressed),]) )
boxplot( as.matrix(t(alldata@assays$RNA@counts[names(most_expressed),])) )
boxplot( as.matrix(t(alldata@assays$RNA@counts[names(most_expressed),])),cex=.1 )
boxplot( as.matrix(t(alldata@assays$RNA@counts[names(most_expressed),])),cex=.1, horiz=T)
boxplot( as.matrix(t(alldata@assays$RNA@counts[names(most_expressed),])),cex=.1, las=1)
boxplot( as.matrix(t(alldata@assays$RNA@counts[names(most_expressed),])),cex=.1, las=2)
boxplot( as.matrix(t(alldata@assays$RNA@counts[names(most_expressed),])),cex=.1, las=2,cex.lab=.5)
boxplot( as.matrix(t(alldata@assays$RNA@counts[names(most_expressed),])),cex=.1, las=2,cex.axs=.5)
boxplot( as.matrix(t(alldata@assays$RNA@counts[names(most_expressed),])),cex=.1, las=2,cex.axes=.5)
boxplot( as.matrix(t(alldata@assays$RNA@counts[names(most_expressed),])),cex=.1, las=2, cex.axis=.5)
barplot(most_expressed, las=2, horiz = T)
barplot(most_expressed, las=2)
boxplot( as.matrix(t(alldata@assays$RNA@counts[names(most_expressed),])),cex=.1, las=2, cex.axis=.5)
par(mfrow=c(1,2))
barplot(most_expressed, las=2)
boxplot( as.matrix(t(alldata@assays$RNA@counts[names(most_expressed),])),cex=.1, las=2, cex.axis=.5)
most_expressed <- sort(Matrix::rowSums(alldata@assays$RNA@counts),T)[1:30]
par(mfrow=c(1,2))
barplot(most_expressed, las=2)
boxplot( as.matrix(t(alldata@assays$RNA@counts[names(most_expressed),])),cex=.1, las=2, cex.axis=.5)
most_expressed <- sort(Matrix::rowSums(alldata@assays$RNA@counts),T)[1:30]
par(mfrow=c(1,2))
barplot(most_expressed, las=2)
boxplot( as.matrix(t(alldata@assays$RNA@counts[names(most_expressed),])),cex=.1, las=2)
most_expressed <- sort(Matrix::rowSums(alldata@assays$RNA@counts / Matrix::colSums(alldata@assays$RNA@counts) ),T)[1:30]
par(mfrow=c(1,2))
barplot(most_expressed, las=2)
boxplot( as.matrix(t(alldata@assays$RNA@counts[names(most_expressed),])),cex=.1, las=2)
most_expressed
most_expressed <- most_expressed / ncol(alldata)
most_expressed
par(mfrow=c(1,2))
barplot(most_expressed, las=2)
boxplot( as.matrix(t(alldata@assays$RNA@counts[names(most_expressed),])),cex=.1, las=2)
most_expressed <- sort(Matrix::rowSums(data.filt@assays$RNA@counts / Matrix::colSums(data.filt@assays$RNA@counts) ),T)[1:30]
most_expressed <- most_expressed / ncol(data.filt)
par(mfrow=c(1,2))
barplot(most_expressed, las=2)
boxplot( as.matrix(t(alldata@assays$RNA@counts[names(most_expressed),])),cex=.1, las=2)
#Compute the relative expression of each gene per cell
rel_expression <- data.filt@assays$RNA@counts / Matrix::colSums(data.filt@assays$RNA@counts)
rel_expression
#Compute the relative expression of each gene per cell
rel_expression <- data.filt@assays$RNA@counts / Matrix::colSums(data.filt@assays$RNA@counts)
most_expressed <- sort(Matrix::rowSums( rel_expression ),T)[1:30] / ncol(data.filt)
most_expressed
most_expressed <- sort(Matrix::rowSums( rel_expression ),T)[1:20] / ncol(data.filt)
most_expressed
par(mfrow=c(1,2))
barplot(most_expressed, las=2)
boxplot( as.matrix(t(rel_expression[names(most_expressed),])),cex=.1, las=2)
#Compute the relative expression of each gene per cell
rel_expression <- data.filt@assays$RNA@counts / Matrix::colSums(data.filt@assays$RNA@counts)
most_expressed <- sort(Matrix::rowSums( rel_expression ),T)[1:20] / ncol(data.filt)
most_expressed
par(mfrow=c(1,2))
boxplot( as.matrix(t(rel_expression[names(most_expressed),])),cex=.1, las=2, )
boxplot( as.matrix(t(rel_expression[names(most_expressed),]))*100,cex=.1, las=2, ylab="% total count per cell")
#Compute the relative expression of each gene per cell
rel_expression <- data.filt@assays$RNA@counts / Matrix::colSums(data.filt@assays$RNA@counts)
most_expressed <- sort(Matrix::rowSums( rel_expression ),T)[1:20] / ncol(data.filt)
most_expressed
par(mfrow=c(1,2))
boxplot( as.matrix(t(rel_expression[names(most_expressed),]))*100,cex=.1, las=2, ylab="% total count per cell")
boxplot( as.matrix(t(rel_expression[names(most_expressed),]))*100,cex=.1, las=2, ylab="% total count per cell",color=scales::hue_pal()(1:20))
boxplot( as.matrix(t(rel_expression[names(most_expressed),]))*100,cex=.1, las=2, ylab="% total count per cell",col=scales::hue_pal()(1:20))
scales::hue_pal()(1:20)
boxplot( as.matrix(t(rel_expression[names(most_expressed),]))*100,cex=.1, las=2, ylab="% total count per cell",col=scales::hue_pal()(20) )
#Compute the relative expression of each gene per cell
rel_expression <- t( t(data.filt@assays$RNA@counts) / Matrix::colSums(data.filt@assays$RNA@counts))
most_expressed <- sort(Matrix::rowSums( rel_expression ),T)[1:20] / ncol(data.filt)
most_expressed
par(mfrow=c(1,2))
boxplot( as.matrix(t(rel_expression[names(most_expressed),]))*100,cex=.1, las=2, ylab="% total count per cell",col=scales::hue_pal()(20) )
#define path to this script (wherever it is)
initial.options <- commandArgs(trailingOnly = FALSE)
script_path <- dirname(sub("--file=","",initial.options[grep("--file=",initial.options)]))
script_path <- "/Users/paulo.barenco/Box/repos/workshop-scRNAseq/labs/r_labs/seurat"
setwd(script_path)
text <- readLines("../Knit_labs.Rmd")
l <- function(x, text, lab="SEURAT"){  p = paste0("#",x,"_",lab,":")
return( sub(p,"", text[grep( p ,text)] ))}
l("OBJ",text,"TITLE")
l("OBJ",text,"ALL1")
l("QC",text,"TITLE")[1]
l("QC",text,"ALL1")
l("QC",text,"ALL1.1")
l("QC",text,"ALL2")
l("QC",text,"TITLE2")
l("QC",text,"ALL3")
l("QC",text,"ALL4")
l("FILTERING",text,"TITLE")
l("FILTERING",text,"TITLE1")
l("FILTERING",text,"ALL0")
l("FILTERING",text,"ALL4")
selected_mito <- WhichCells(data.filt, expression = percent_mito < 25)
selected_ribo <- WhichCells(data.filt, expression = percent_ribo > 5)
selected_mito <- WhichCells(data.filt, expression = percent_mito < 25)
selected_ribo <- WhichCells(data.filt, expression = percent_ribo > .05)
# and subset the object to only keep those cells
data.filt <- subset(data.filt, cells = selected_mito)
data.filt <- subset(data.filt, cells = selected_ribo)
# plot violins for new data
VlnPlot(data.filt, features = c("percent_mito","percent_ribo") ,ncol = 4)
selected_mito <- WhichCells(data.filt, expression = percent_mito < 0.25)
selected_ribo <- WhichCells(data.filt, expression = percent_ribo > 0.05)
# and subset the object to only keep those cells
data.filt <- subset(data.filt, cells = selected_mito)
data.filt <- subset(data.filt, cells = selected_ribo)
# plot violins for new data
VlnPlot(data.filt, features = c("percent_mito","percent_ribo") ,ncol = 4)
cowplot::plot_grid(ncol = 4,
FeatureScatter(alldata, "nCount_RNA"  , "nFeature_RNA", group.by = "orig.ident")+ ggtitle(""),
FeatureScatter(alldata, "percent_mito", "nFeature_RNA", group.by = "orig.ident")+ ggtitle(""),
FeatureScatter(alldata, "percent_ribo", "nFeature_RNA", group.by = "orig.ident")+ ggtitle(""),
FeatureScatter(alldata, "percent_ribo", "percent_mito", group.by = "orig.ident")+ ggtitle("")
)
#define path to this script (wherever it is)
initial.options <- commandArgs(trailingOnly = FALSE)
script_path <- dirname(sub("--file=","",initial.options[grep("--file=",initial.options)]))
script_path <- "/Users/paulo.barenco/Box/repos/workshop-scRNAseq/labs/r_labs/seurat"
setwd(script_path)
text <- readLines("../Knit_labs.Rmd")
l <- function(x, text, lab="SEURAT"){  p = paste0("#",x,"_",lab,":")
return( sub(p,"", text[grep( p ,text)] ))}
suppressMessages(require(Seurat))
suppressMessages(require(scater))
suppressMessages(require(Matrix))
v3.1k <- Read10X_h5("data/pbmc_1k_v3_filtered_feature_bc_matrix.h5", use.names = T)
v2.1k <- Read10X_h5("data/pbmc_1k_v2_filtered_feature_bc_matrix.h5", use.names = T)
p3.1k <- Read10X_h5("data/pbmc_1k_protein_v3_filtered_feature_bc_matrix.h5", use.names = T)
p3.1k <- p3.1k$`Gene Expression`
sdata.v2.1k <- CreateSeuratObject(v2.1k, project = "v2.1k")
sdata.v3.1k <- CreateSeuratObject(v3.1k, project = "v3.1k")
sdata.p3.1k <- CreateSeuratObject(p3.1k, project = "p3.1k")
# Merge datasets into one single seurat object
alldata <- merge(sdata.v2.1k, c(sdata.v3.1k,sdata.p3.1k), add.cell.ids=c("v2.1k","v3.1k","p3.1k"))
# Add in a metadata column that indicates v2 vs v3 chemistry
alldata$Chemistry <- ifelse(alldata$orig.ident == "v2.1k","v2","v3")
as.data.frame(alldata@assays$RNA@counts[1:10,1:2])
head(alldata@meta.data,10)
# Way1: Doing it using Seurat function
alldata <- PercentageFeatureSet(alldata, "^MT-", col.name = "percent_mito")
# Way2: Doing it manually
total_counts_per_cell <- colSums(  alldata@assays$RNA@counts  )
mito_genes <- rownames(alldata)[grep("^MT-",rownames(alldata))]
head(mito_genes,10)
alldata$percent_mito <- colSums(  alldata@assays$RNA@counts[mito_genes,]  ) / total_counts_per_cell
# Way1: Doing it using Seurat function
alldata <- PercentageFeatureSet(alldata, "^RP[SL]", col.name = "percent_ribo")
# Way2: Doing it manually
ribo_genes <- rownames(alldata)[grep("^RP[SL]",rownames(alldata))]
head(ribo_genes,10)
alldata$percent_ribo <- colSums(  alldata@assays$RNA@counts[ribo_genes,]  ) / total_counts_per_cell
feats <- c("nFeature_RNA","nCount_RNA","percent_mito","percent_ribo")
VlnPlot(alldata, group.by= "orig.ident", features = feats, pt.size = 0.1,ncol = 4) + NoLegend()
cowplot::plot_grid(ncol = 4,
FeatureScatter(alldata, "nCount_RNA"  , "nFeature_RNA", group.by = "orig.ident"),
FeatureScatter(alldata, "percent_mito", "nFeature_RNA", group.by = "orig.ident"),
FeatureScatter(alldata, "percent_ribo", "nFeature_RNA", group.by = "orig.ident"),
FeatureScatter(alldata, "percent_ribo", "percent_mito", group.by = "orig.ident")
)
selected_c <- WhichCells(alldata, expression = nFeature_RNA > 200)
selected_f <- rownames(alldata)[ Matrix::rowSums(alldata) > 3]
data.filt <- subset(alldata, features=selected_f, cells=selected_c)
dim(data.filt)
#start with cells with many genes detected.
high.det.v3 <- WhichCells(data.filt, expression = nFeature_RNA > 4100)
high.det.v2 <- WhichCells(data.filt, expression = nFeature_RNA > 2000 & orig.ident == "v2.1k")
# remove these cells
data.filt <- subset(data.filt, cells=setdiff(WhichCells(data.filt),c(high.det.v2,high.det.v3)))
# check number of cells
ncol(data.filt)
#Compute the relative expression of each gene per cell
rel_expression <- t( t(data.filt@assays$RNA@counts) / Matrix::colSums(data.filt@assays$RNA@counts))
most_expressed <- sort(Matrix::rowSums( rel_expression ),T)[1:20] / ncol(data.filt)
most_expressed
par(mfrow=c(1,2))
boxplot( as.matrix(t(rel_expression[names(most_expressed),]))*100,cex=.1, las=2, ylab="% total count per cell",col=scales::hue_pal()(20) )
selected_mito <- WhichCells(data.filt, expression = percent_mito < 0.25)
selected_ribo <- WhichCells(data.filt, expression = percent_ribo > 0.05)
# and subset the object to only keep those cells
data.filt <- subset(data.filt, cells = selected_mito)
data.filt <- subset(data.filt, cells = selected_ribo)
# plot violins for new data
VlnPlot(data.filt, features = c("percent_mito","percent_ribo") ,ncol = 4)
feats <- c("nFeature_RNA","nCount_RNA","percent_mito","percent_ribo")
cowplot::plot_grid(ncol = 1,
VlnPlot(data.filt, group.by= "orig.ident", features = feats, pt.size = 0.1,ncol = 4) + NoLegend(),
VlnPlot(data.filt, group.by= "Chemistry", features = feats, pt.size = 0.1,ncol = 4) + NoLegend()
)
feats <- c("nFeature_RNA","nCount_RNA","percent_mito","percent_ribo")
cowplot::plot_grid(ncol = 1,
VlnPlot(data.filt, group.by= "orig.ident", features = feats, pt.size = 0.1,ncol = 4) + NoLegend())
data.filt <- NormalizeData(data.filt)
data.filt <- CellCycleScoring(object = data.filt,
g2m.features = cc.genes$g2m.genes,
s.features = cc.genes$s.genes)
VlnPlot(data.filt, features = c("S.Score","G2M.Score"), group.by= "orig.ident")
VlnPlot(data.filt, features = c("S.Score","G2M.Score"), group.by= "orig.ident",ncol = 4)
feats <- c("nFeature_RNA","nCount_RNA","percent_mito","percent_ribo")
cowplot::plot_grid(ncol = 1,
VlnPlot(data.filt, group.by= "orig.ident", features = feats, pt.size = 0.1,ncol = 4) + NoLegend())
#Compute the relative expression of each gene per cell
rel_expression <- t( t(data.filt@assays$RNA@counts) / Matrix::colSums(data.filt@assays$RNA@counts))
most_expressed <- sort(Matrix::rowSums( rel_expression ),T)[1:20] / ncol(data.filt)
most_expressed
par(mfrow=c(1,4))
boxplot( as.matrix(t(rel_expression[names(most_expressed),]))*100,cex=.1, las=2, ylab="% total count per cell",col=scales::hue_pal()(20) )
#Compute the relative expression of each gene per cell
rel_expression <- t( t(data.filt@assays$RNA@counts) / Matrix::colSums(data.filt@assays$RNA@counts))
most_expressed <- sort(Matrix::rowSums( rel_expression ),T)[1:20] / ncol(data.filt)
most_expressed
par(mfrow=c(1,3))
boxplot( as.matrix(t(rel_expression[names(most_expressed),]))*100,cex=.1, las=2, ylab="% total count per cell",col=scales::hue_pal()(20) )
#Compute the relative expression of each gene per cell
rel_expression <- t( t(data.filt@assays$RNA@counts) / Matrix::colSums(data.filt@assays$RNA@counts))
most_expressed <- sort(Matrix::rowSums( rel_expression ),T)[1:20] / ncol(data.filt)
most_expressed
par(mfrow=c(1,3))
boxplot( as.matrix(t(rel_expression[names(most_expressed),]))*100,cex=.1, las=2, ylab="% total count per cell",col=scales::hue_pal()(20),cex.label=2)
#Compute the relative expression of each gene per cell
rel_expression <- t( t(data.filt@assays$RNA@counts) / Matrix::colSums(data.filt@assays$RNA@counts))
most_expressed <- sort(Matrix::rowSums( rel_expression ),T)[1:20] / ncol(data.filt)
most_expressed
par(mfrow=c(1,3))
boxplot( as.matrix(t(rel_expression[names(most_expressed),]))*100,cex=.1, las=2, ylab="% total count per cell",col=scales::hue_pal()(20),cex.labels=2)
#Compute the relative expression of each gene per cell
rel_expression <- t( t(data.filt@assays$RNA@counts) / Matrix::colSums(data.filt@assays$RNA@counts))
most_expressed <- sort(Matrix::rowSums( rel_expression ),T)[1:20] / ncol(data.filt)
most_expressed
par(mfrow=c(1,3))
boxplot( as.matrix(t(rel_expression[names(most_expressed),]))*100,cex=.1, las=2, ylab="% total count per cell",col=scales::hue_pal()(20),cex.lab=2)
#Compute the relative expression of each gene per cell
rel_expression <- t( t(data.filt@assays$RNA@counts) / Matrix::colSums(data.filt@assays$RNA@counts))
most_expressed <- sort(Matrix::rowSums( rel_expression ),T)[1:20] / ncol(data.filt) * 100
most_expressed
par(mfrow=c(1,3))
boxplot( as.matrix(t(rel_expression[names(most_expressed),])),cex=.1, las=2, ylab="% total count per cell",col=scales::hue_pal()(20))
#Compute the relative expression of each gene per cell
rel_expression <- t( t(data.filt@assays$RNA@counts) / Matrix::colSums(data.filt@assays$RNA@counts)) * 100
most_expressed <- sort(Matrix::rowSums( rel_expression ),T)[1:20] / ncol(data.filt)
most_expressed
par(mfrow=c(1,3))
boxplot( as.matrix(t(rel_expression[names(most_expressed),])),cex=.1, las=2, ylab="% total count per cell",col=scales::hue_pal()(20))
#Compute the relative expression of each gene per cell
rel_expression <- t( t(data.filt@assays$RNA@counts) / Matrix::colSums(data.filt@assays$RNA@counts)) * 100
most_expressed <- sort(Matrix::rowSums( rel_expression ),T)[1:20] / ncol(data.filt)
most_expressed
par(mfrow=c(1,3))
boxplot( as.matrix(t(rel_expression[names(most_expressed),])),cex=.1, las=2, ylab="% total count per cell",col=scales::hue_pal()(20))
#Compute the relative expression of each gene per cell
rel_expression <- t( t(data.filt@assays$RNA@counts) / Matrix::colSums(data.filt@assays$RNA@counts)) * 100
most_expressed <- sort(Matrix::rowSums( rel_expression ),T)[1:20] / ncol(data.filt)
most_expressed
par(mfrow=c(1,3))
boxplot( as.matrix(t(rel_expression[names(most_expressed),])),cex=.1, las=2, ylab="% total count per cell",col=scales::hue_pal()(20))
#Compute the relative expression of each gene per cell
rel_expression <- t( t(data.filt@assays$RNA@counts) / Matrix::colSums(data.filt@assays$RNA@counts)) * 100
most_expressed <- sort(Matrix::rowSums( rel_expression ),T)[1:20] / ncol(data.filt)
most_expressed
par(mfrow=c(1,3))
boxplot( as.matrix(t(rel_expression[names(most_expressed),])),cex=.1, las=2, ylab="% total count per cell",col=scales::hue_pal()(20))
#Compute the relative expression of each gene per cell
rel_expression <- t( t(data.filt@assays$RNA@counts) / Matrix::colSums(data.filt@assays$RNA@counts)) * 100
most_expressed <- sort(Matrix::rowSums( rel_expression ),T)[1:20] / ncol(data.filt)
most_expressed
par(mfrow=c(1,2))
boxplot( as.matrix(t(rel_expression[names(most_expressed),])),cex=.1, las=2, ylab="% total count per cell",col=scales::hue_pal()(20))
#Compute the relative expression of each gene per cell
rel_expression <- t( t(data.filt@assays$RNA@counts) / Matrix::colSums(data.filt@assays$RNA@counts)) * 100
most_expressed <- sort(Matrix::rowSums( rel_expression ),T)[1:20] / ncol(data.filt)
most_expressed
par(mfrow=c(1,1))
boxplot( as.matrix(t(rel_expression[names(most_expressed),])),cex=.1, las=2, ylab="% total count per cell",col=scales::hue_pal()(20),horizontal=TRUE)
#Compute the relative expression of each gene per cell
rel_expression <- t( t(data.filt@assays$RNA@counts) / Matrix::colSums(data.filt@assays$RNA@counts)) * 100
most_expressed <- sort(Matrix::rowSums( rel_expression ),T)[20:1] / ncol(data.filt)
most_expressed
par(mfrow=c(1,1))
boxplot( as.matrix(t(rel_expression[names(most_expressed),])),cex=.1, las=2, ylab="% total count per cell",col=scales::hue_pal()(20),horizontal=TRUE)
#Compute the relative expression of each gene per cell
rel_expression <- t( t(data.filt@assays$RNA@counts) / Matrix::colSums(data.filt@assays$RNA@counts)) * 100
most_expressed <- sort(Matrix::rowSums( rel_expression ),T)[20:1] / ncol(data.filt)
most_expressed
par(mfrow=c(1,1))
boxplot( as.matrix(t(rel_expression[names(most_expressed),])),cex=.1, las=2, ylab="% total count per cell",col=scales::hue_pal()(20)[20:1],horizontal=TRUE)
#Compute the relative expression of each gene per cell
rel_expression <- t( t(data.filt@assays$RNA@counts) / Matrix::colSums(data.filt@assays$RNA@counts)) * 100
most_expressed <- sort(Matrix::rowSums( rel_expression ),T)[20:1] / ncol(data.filt)
most_expressed
par(mfrow=c(1,1))
boxplot( as.matrix(t(rel_expression[names(most_expressed),])),cex=.1, las=2, ylab="% total count per cell",col=scales::hue_pal()(20)[20:1],horizontal=TRUE)
#Compute the relative expression of each gene per cell
rel_expression <- t( t(data.filt@assays$RNA@counts) / Matrix::colSums(data.filt@assays$RNA@counts)) * 100
most_expressed <- sort(Matrix::rowSums( rel_expression ),T)[20:1] / ncol(data.filt)
most_expressed
par(mfrow=c(1,1))
boxplot( as.matrix(t(rel_expression[names(most_expressed),])),cex=.1, las=2, ylab="% total count per cell",col=scales::hue_pal()(20)[20:1],horizontal=TRUE)
#Compute the relative expression of each gene per cell
rel_expression <- t( t(data.filt@assays$RNA@counts) / Matrix::colSums(data.filt@assays$RNA@counts)) * 100
most_expressed <- sort(Matrix::rowSums( rel_expression ),T)[20:1] / ncol(data.filt)
most_expressed
par(mfrow=c(1,1))
boxplot( as.matrix(t(rel_expression[names(most_expressed),])),cex=.1, las=2, ylab="% total count per cell",col=scales::hue_pal()(20)[20:1],horizontal=TRUE)
#Compute the relative expression of each gene per cell
rel_expression <- t( t(data.filt@assays$RNA@counts) / Matrix::colSums(data.filt@assays$RNA@counts)) * 100
most_expressed <- sort(Matrix::rowSums( rel_expression ),T)[20:1] / ncol(data.filt)
most_expressed
par(mfrow=c(1,1))
boxplot( as.matrix(t(rel_expression[names(most_expressed),])),cex=.1, las=2, ylab="% total count per cell",col=scales::hue_pal()(20)[20:1],horizontal=TRUE)
#Compute the relative expression of each gene per cell
rel_expression <- t( t(data.filt@assays$RNA@counts) / Matrix::colSums(data.filt@assays$RNA@counts)) * 100
most_expressed <- sort(Matrix::rowSums( rel_expression ),T)[20:1] / ncol(data.filt)
most_expressed
par(mfrow=c(1,1),mar(c()))
#Compute the relative expression of each gene per cell
rel_expression <- t( t(data.filt@assays$RNA@counts) / Matrix::colSums(data.filt@assays$RNA@counts)) * 100
most_expressed <- sort(Matrix::rowSums( rel_expression ),T)[20:1] / ncol(data.filt)
most_expressed
par(mfrow=c(1,1))
boxplot( as.matrix(t(rel_expression[names(most_expressed),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(20)[20:1],horizontal=TRUE)
#Compute the relative expression of each gene per cell
rel_expression <- t( t(data.filt@assays$RNA@counts) / Matrix::colSums(data.filt@assays$RNA@counts)) * 100
most_expressed <- sort(Matrix::rowSums( rel_expression ),T)[20:1] / ncol(data.filt)
most_expressed
par(mfrow=c(1,1),mar=c(4,5,1,1))
boxplot( as.matrix(t(rel_expression[names(most_expressed),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(20)[20:1],horizontal=TRUE)
#Compute the relative expression of each gene per cell
rel_expression <- t( t(data.filt@assays$RNA@counts) / Matrix::colSums(data.filt@assays$RNA@counts)) * 100
most_expressed <- sort(Matrix::rowSums( rel_expression ),T)[20:1] / ncol(data.filt)
most_expressed
par(mfrow=c(1,1),mar=c(4,6,1,1))
boxplot( as.matrix(t(rel_expression[names(most_expressed),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(20)[20:1],horizontal=TRUE)
#Compute the relative expression of each gene per cell
rel_expression <- t( t(data.filt@assays$RNA@counts) / Matrix::colSums(data.filt@assays$RNA@counts)) * 100
most_expressed <- sort(Matrix::rowSums( rel_expression ),T)[20:1] / ncol(data.filt)
most_expressed
par(mfrow=c(1,1),mar=c(3,6,1,1))
boxplot( as.matrix(t(rel_expression[names(most_expressed),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(20)[20:1],horizontal=TRUE)
#Compute the relative expression of each gene per cell
rel_expression <- t( t(data.filt@assays$RNA@counts) / Matrix::colSums(data.filt@assays$RNA@counts)) * 100
most_expressed <- sort(Matrix::rowSums( rel_expression ),T)[20:1] / ncol(data.filt)
most_expressed
par(mfrow=c(1,1),mar=c(4,6,1,1))
boxplot( as.matrix(t(rel_expression[names(most_expressed),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(20)[20:1],horizontal=TRUE)
#Compute the relative expression of each gene per cell
rel_expression <- t( t(data.filt@assays$RNA@counts) / Matrix::colSums(data.filt@assays$RNA@counts)) * 100
most_expressed <- sort(Matrix::rowSums( rel_expression ),T)[20:1] / ncol(data.filt)
par(mfrow=c(1,1),mar=c(4,6,1,1))
boxplot( as.matrix(t(rel_expression[names(most_expressed),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(20)[20:1],horizontal=TRUE)
#Compute the relative expression of each gene per cell
rel_expression <- t( t(data.filt@assays$RNA@counts) / Matrix::colSums(data.filt@assays$RNA@counts)) * 100
most_expressed <- sort(Matrix::rowSums( rel_expression ),T)[20:1] / ncol(data.filt)
par(mfrow=c(1,2),mar=c(4,6,1,1))
boxplot( as.matrix(t(rel_expression[names(most_expressed),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(20)[20:1],horizontal=TRUE)
# plot violins for new data
VlnPlot(data.filt, features = c("percent_mito","percent_ribo") ,ncol = 4, pt.size = .1)
cowplot::plot_grid(ncol = 4,
FeatureScatter(alldata, "nCount_RNA"  , "nFeature_RNA", group.by = "orig.ident", pt.size = .1),
FeatureScatter(alldata, "percent_mito", "nFeature_RNA", group.by = "orig.ident", pt.size = .1),
FeatureScatter(alldata, "percent_ribo", "nFeature_RNA", group.by = "orig.ident", pt.size = .1),
FeatureScatter(alldata, "percent_ribo", "percent_mito", group.by = "orig.ident", pt.size = .1)
)
VlnPlot(data.filt, features = c("S.Score","G2M.Score"), group.by= "orig.ident",ncol = 4, pt.size = .1)
l("FILTERING",text,"ALL01")
l("CELLCYCLE",text,"ALL3")
saveRDS("data/qc_filtered_3pbmc.rds")
saveRDS(data.filt,"data/qc_filtered_3pbmc.rds")
getwd()
saveRDS(data.filt,"data/qc_filtered_3pbmc.rds")
#define path to this script (wherever it is)
initial.options <- commandArgs(trailingOnly = FALSE)
script_path <- dirname(sub("--file=","",initial.options[grep("--file=",initial.options)]))
script_path <- "/Users/paulo.barenco/Box/repos/workshop-scRNAseq/labs/r_labs/seurat"
setwd(script_path)
text <- readLines("../Knit_labs.Rmd")
l <- function(x, text, lab="SEURAT"){  p = paste0("#",x,"_",lab,":")
return( sub(p,"", text[grep( p ,text)] ))}
suppressMessages(require(Seurat))
suppressMessages(require(scater))
suppressMessages(require(Matrix))
v3.1k <- Read10X_h5("data/pbmc_1k_v3_filtered_feature_bc_matrix.h5", use.names = T)
v2.1k <- Read10X_h5("data/pbmc_1k_v2_filtered_feature_bc_matrix.h5", use.names = T)
p3.1k <- Read10X_h5("data/pbmc_1k_protein_v3_filtered_feature_bc_matrix.h5", use.names = T)
p3.1k <- p3.1k$`Gene Expression`
sdata.v2.1k <- CreateSeuratObject(v2.1k, project = "v2.1k")
sdata.v3.1k <- CreateSeuratObject(v3.1k, project = "v3.1k")
sdata.p3.1k <- CreateSeuratObject(p3.1k, project = "p3.1k")
# Merge datasets into one single seurat object
alldata <- merge(sdata.v2.1k, c(sdata.v3.1k,sdata.p3.1k), add.cell.ids=c("v2.1k","v3.1k","p3.1k"))
# Add in a metadata column that indicates v2 vs v3 chemistry
alldata$Chemistry <- ifelse(alldata$orig.ident == "v2.1k","v2","v3")
as.data.frame(alldata@assays$RNA@counts[1:10,1:2])
head(alldata@meta.data,10)
# Way1: Doing it using Seurat function
alldata <- PercentageFeatureSet(alldata, "^MT-", col.name = "percent_mito")
# Way2: Doing it manually
total_counts_per_cell <- colSums(  alldata@assays$RNA@counts  )
mito_genes <- rownames(alldata)[grep("^MT-",rownames(alldata))]
head(mito_genes,10)
alldata$percent_mito <- colSums(  alldata@assays$RNA@counts[mito_genes,]  ) / total_counts_per_cell
# Way1: Doing it using Seurat function
alldata <- PercentageFeatureSet(alldata, "^RP[SL]", col.name = "percent_ribo")
# Way2: Doing it manually
ribo_genes <- rownames(alldata)[grep("^RP[SL]",rownames(alldata))]
head(ribo_genes,10)
alldata$percent_ribo <- colSums(  alldata@assays$RNA@counts[ribo_genes,]  ) / total_counts_per_cell
feats <- c("nFeature_RNA","nCount_RNA","percent_mito","percent_ribo")
VlnPlot(alldata, group.by= "orig.ident", features = feats, pt.size = 0.1,ncol = 4) + NoLegend()
cowplot::plot_grid(ncol = 4,
FeatureScatter(alldata, "nCount_RNA"  , "nFeature_RNA", group.by = "orig.ident", pt.size = .1),
FeatureScatter(alldata, "percent_mito", "nFeature_RNA", group.by = "orig.ident", pt.size = .1),
FeatureScatter(alldata, "percent_ribo", "nFeature_RNA", group.by = "orig.ident", pt.size = .1),
FeatureScatter(alldata, "percent_ribo", "percent_mito", group.by = "orig.ident", pt.size = .1)
)
selected_c <- WhichCells(alldata, expression = nFeature_RNA > 200)
selected_f <- rownames(alldata)[ Matrix::rowSums(alldata) > 3]
data.filt <- subset(alldata, features=selected_f, cells=selected_c)
dim(data.filt)
#start with cells with many genes detected.
high.det.v3 <- WhichCells(data.filt, expression = nFeature_RNA > 4100)
high.det.v2 <- WhichCells(data.filt, expression = nFeature_RNA > 2000 & orig.ident == "v2.1k")
# remove these cells
data.filt <- subset(data.filt, cells=setdiff(WhichCells(data.filt),c(high.det.v2,high.det.v3)))
# check number of cells
ncol(data.filt)
#Compute the relative expression of each gene per cell
rel_expression <- t( t(data.filt@assays$RNA@counts) / Matrix::colSums(data.filt@assays$RNA@counts)) * 100
most_expressed <- sort(Matrix::rowSums( rel_expression ),T)[20:1] / ncol(data.filt)
par(mfrow=c(1,2),mar=c(4,6,1,1))
boxplot( as.matrix(t(rel_expression[names(most_expressed),])),cex=.1, las=1, xlab="% total count per cell",col=scales::hue_pal()(20)[20:1],horizontal=TRUE)
selected_mito <- WhichCells(data.filt, expression = percent_mito < 0.25)
selected_ribo <- WhichCells(data.filt, expression = percent_ribo > 0.05)
# and subset the object to only keep those cells
data.filt <- subset(data.filt, cells = selected_mito)
data.filt <- subset(data.filt, cells = selected_ribo)
feats <- c("nFeature_RNA","nCount_RNA","percent_mito","percent_ribo")
cowplot::plot_grid(ncol = 1,
VlnPlot(data.filt, group.by= "orig.ident", features = feats, pt.size = 0.1,ncol = 4) + NoLegend())
data.filt <- NormalizeData(data.filt)
data.filt <- CellCycleScoring(object = data.filt,
g2m.features = cc.genes$g2m.genes,
s.features = cc.genes$s.genes)
VlnPlot(data.filt, features = c("S.Score","G2M.Score"), group.by= "orig.ident",ncol = 4, pt.size = .1)
l("CELLCYCLE",text,"ALL3")
l("CELLCYCLE",text,"ALL3")
l("CELLCYCLE",text,"ALL4")
